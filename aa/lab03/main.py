import numpy as np
import random

from time import process_time


def menu():
    print('\nüöÄ –ú–µ–Ω—é: ')
    print('1) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–ø—É–∑—ã—Ä—å–∫–æ–º)')
    print('2) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–≤—ã–±–æ—Ä–æ–º)')
    print('3) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (—Ä–∞—Å—á–µ—Å–∫–æ–π)')
    print('4) –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')


def time_analyze(function, iterations=100, size=5):
    t1 = process_time()
    for _ in range(iterations):
        start(size, function, False)
    t2 = process_time()
    return (t2 - t1) / iterations


def start(size, func, printable):
    arr = prepare_arr(size)
    if printable:
        print(arr)

    arr = func(arr, size)
    if printable:
        print(arr)
    return arr


def prepare_arr(size):
    arr = []
    for i in range(size):
        arr.append(i)
    random.shuffle(arr)
    return arr


def empty(arr, n):
    return arr

def analyze_time(iteration=10, size=10):
    print("–†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü: ", size)
    time_empty = time_analyze(empty, iteration, size)
    print("   –í—Ä–µ–º—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ : ", "{0:.8f}".format(time_empty))
    time_bubble = time_analyze(bubble, iteration, size) - time_empty
    print("   –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—É–∑—ã—Ä—å–∫–æ–º                   : ", "{0:.8f}".format(time_bubble))
    time_selection = time_analyze(selection, iteration, size) - time_empty
    print("   –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º                     : ", "{0:.8f}".format(time_selection))
    time_comb = time_analyze(comb, iteration, size) - time_empty
    print("   –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å—á–µ—Å–∫–æ–π                   : ", "{0:.8f}".format(time_comb))

    print('P.S. –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∞–∏–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–æ–≤')


# ======================================================================================================================
def bubble(arr, n):
    i = 0
    while i < n - 1:
        j = i + 1
        while j < n:
            if arr[i] > arr[j]:
                tmp = arr[i]
                arr[i] = arr[j]
                arr[j] = tmp
            j += 1
        i += 1
    return arr


def selection(arr, n):
    i = 0
    while i < n - 1:
        j = i + 1
        mina = arr[i]
        mini = i
        while j < n:
            if arr[j] < mina:
                mina = arr[j]
                mini = j
            j += 1
        tmp = arr[i]
        arr[i] = arr[mini]
        arr[mini] = tmp
        i += 1
    return arr


def comb(arr, n):
    gap = (n * 10 // 13)

    while gap:
        if 8 < gap < 11:
            gap = 11
        swapped = False
        i = 0
        m = n - gap
        while i < m:
            if arr[i + gap] < arr[i]:
                tmp = arr[i]
                arr[i] = arr[i + gap]
                arr[i + gap] = tmp
                swapped = True
            i += 1
        gap = (gap * 10 // 13) or swapped
    return arr


if __name__ == '__main__':
    while True:
        menu()
        case = input('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ')

        if case == '1':
            size = int(input('  –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: '))
            start(size, bubble, True)
        elif case == '2':
            size = int(input('  –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: '))
            start(size, selection, True)
        elif case == '3':
            size = int(input('  –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: '))
            start(size, comb, True)
        elif case == '4':
            size = int(input('  –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: '))
            iteration = int(input('  –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: '))
            analyze_time(iteration, size)

